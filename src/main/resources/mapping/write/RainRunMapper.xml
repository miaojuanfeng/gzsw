<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="gz.sw.mapper.write.RainRunDao">
    <select id="selectCount" resultType="java.lang.Integer">
        select
        	count(r.id)
        from rainrun r
        left join station s on r.stcd = s.stcd
        left join sttype t on s.type = t.code
        where 1=1
        <if test="sttp != null and sttp != ''" >
            and t.code = #{sttp}
        </if>
        <if test="stcd != null and stcd != ''" >
            and s.stcd = #{stcd}
        </if>
        <if test="name != null and name != ''" >
            and r.name like '%' + #{name} + '%'
        </if>
    </select>
    <select id="selectList" resultType="java.util.Map">
        select r1.id, r1.name, 'Pa0 - Pa60' as lname, CONVERT(varchar(100), r1.create_time, 20) as createTime, s.stname, t.name as sttype
        from rainrun r1
        left join station s on r1.stcd = s.stcd
        left join sttype t on s.type = t.code,
        (select TOP ${page*limit} row_number() OVER (order by r.id desc, r.ID desc) n, r.ID
        from rainrun r
        left join station s on r.stcd = s.stcd
        left join sttype t on s.type = t.code
        where 1=1
        <if test="sttp != null and sttp != ''" >
            and t.code = #{sttp}
        </if>
        <if test="stcd != null and stcd != ''" >
            and s.stcd = #{stcd}
        </if>
        <if test="name != null and name != ''" >
            and r.name like '%' + #{name} + '%'
        </if>
        ) r2
        where 1=1
        and r1.id = r2.id
        and r2.n > ${(page-1)*limit}
        order by r2.n asc
    </select>
    <select id="selectListByStcd" resultType="java.util.Map">
        select
        	id, name, stcd
        from rainrun
        where stcd = #{stcd}
        order by id desc
    </select>
    <select id="selectRainRunPoint" resultType="java.util.Map">
        select
        	rl.PA, rp.D, rp.R
        from rainrun_point rp
        left join rainrun_line rl on rp.lid = rl.lid
        where rl.pid = #{rainRun}
        order by rl.pa, rp.pino asc
    </select>
    <select id="selectPointList" resultType="java.util.Map">
        select
        	rl.lname, rp.id, rp.pino, rp.d, rp.r
        from rainrun_point rp
        left join rainrun_line rl on rp.lid = rl.lid
        where rl.pid = #{pid}
        order by rl.pa asc, rp.pino asc
    </select>
    <insert id="insert" parameterType="gz.sw.entity.write.RainRun" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        insert into rainrun(name,stcd,create_time)
        values(#{name},#{stcd},#{createTime})
    </insert>
    <insert id="insertLineBatch" parameterType="gz.sw.entity.write.RainRun">
        insert into rainrun_line
        (stcd, lname, lid, pa, pid, create_time)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.stcd},#{item.lname},#{item.lid},#{item.pa},#{item.pid},#{item.createTime})
        </foreach>
    </insert>
    <insert id="insertPointBatch" parameterType="gz.sw.entity.write.RainRunPoint">
        insert into rainrun_point
        (lid, pino, r, d)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.lid},#{item.pino},#{item.r},#{item.d})
        </foreach>
    </insert>
    <delete id="delete">
        delete from rainrun where id = #{id}
    </delete>
    <delete id="deleteById">
        delete rl,rp from rainrun_point rp
         left join rainrun_line rl on rp.lid = rl.lid
        where rl.pid = #{pid}
    </delete>
</mapper>